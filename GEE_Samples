// Import the required Region of Interest or a shapefiles
// Define a function that scales and masks Landsat 8 surface reflectance images.
function prepSrL8(image) {
  // Develop masks for unwanted pixels (fill, cloud, cloud shadow).
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var getFactorImg = function(factorNames) {
    var factorList = image.toDictionary().select(factorNames).values();
    return ee.Image.constant(factorList);
  };
  var scaleImg = getFactorImg([
    'REFLECTANCE_MULT_BAND_.|TEMPERATURE_MULT_BAND_ST_B10']);
  var offsetImg = getFactorImg([
    'REFLECTANCE_ADD_BAND_.|TEMPERATURE_ADD_BAND_ST_B10']);
  var scaled = image.select('SR_B.|ST_B10').multiply(scaleImg).add(offsetImg);

  // Replace original bands with scaled bands and apply masks.
  return image.addBands(scaled, null, true)
    .updateMask(qaMask).updateMask(saturationMask);
}


// Make a cloud-free Landsat 8 surface reflectance composite.
var image = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate('2020-10-01', '2020-12-31')
  .map(prepSrL8)
  .select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5',
            'SR_B6', 'SR_B7'])
  .median()
  .clip(ROI);
  
print(image);

// Visualisation Parameters for the Landsat data
// var vizParams = {
// bands: ['SR_B5', 'SR_B4', 'SR_B3'],
// min: 0,
// max: 4000,
// gamma: [1, 0.9, 1.1]
// };

var vizParamsSR = { bands: ['SR_B5', 'SR_B4', 'SR_B3'],
min: 0,
max: 1.6,
gamma: 4.0,
};

// Display the Map of landsat Data
Map.addLayer(image, vizParamsSR, 'Landsat_8_FCC');
Map.centerObject(ROI, 10);


// Export Image to Google drive
Export.image.toDrive({
  image: image,
  description: 'L8_2020_Post',
  region: ROI
});
